
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE DO ELSE EQUALS FOR FUNCTION ID IF LPAREN MINUS NUMBER PLUS RPAREN SEMI TIMES WHILEstatement : ID EQUALS expression\n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n    \n    statement : IF expression statement\n              | IF expression statement ELSE statement\n    statement : WHILE expression statementstatement : DO statement WHILE expressionstatement : FOR LPAREN statement SEMI expression SEMI statement RPARENexpression : FUNCTION ID LPAREN param_list RPARENparam_list : expression COMMA param_listparam_list : expressionexpression : LPAREN expression RPAREN\n    expression : NUMBER\n               | ID\n    '
    
_lr_action_items = {'ID':([0,3,4,5,7,8,9,10,11,12,13,15,18,19,20,21,25,27,28,29,30,31,32,33,35,40,41,42,],[2,10,10,2,10,2,22,-16,10,-15,2,2,10,10,10,10,10,2,-2,-3,-4,-5,10,-14,10,-11,10,2,]),'IF':([0,5,8,10,12,13,15,27,28,29,30,31,33,40,42,],[3,3,3,-16,-15,3,3,3,-2,-3,-4,-5,-14,-11,3,]),'WHILE':([0,5,8,10,12,13,14,15,16,17,24,27,28,29,30,31,33,34,36,40,42,45,],[4,4,4,-16,-15,4,25,4,-1,-6,-8,4,-2,-3,-4,-5,-14,-9,-7,-11,4,-10,]),'DO':([0,5,8,10,12,13,15,27,28,29,30,31,33,40,42,],[5,5,5,-16,-15,5,5,5,-2,-3,-4,-5,-14,-11,5,]),'FOR':([0,5,8,10,12,13,15,27,28,29,30,31,33,40,42,],[6,6,6,-16,-15,6,6,6,-2,-3,-4,-5,-14,-11,6,]),'$end':([1,10,12,16,17,24,28,29,30,31,33,34,36,40,45,],[0,-16,-15,-1,-6,-8,-2,-3,-4,-5,-14,-9,-7,-11,-10,]),'EQUALS':([2,],[7,]),'FUNCTION':([3,4,7,11,18,19,20,21,25,32,35,41,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'LPAREN':([3,4,6,7,11,18,19,20,21,22,25,32,35,41,],[11,11,15,11,11,11,11,11,11,32,11,11,11,11,]),'NUMBER':([3,4,7,11,18,19,20,21,25,32,35,41,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'PLUS':([8,10,12,13,16,23,28,29,30,31,33,34,38,39,40,],[18,-16,-15,18,18,18,18,18,18,18,-14,18,18,18,-11,]),'MINUS':([8,10,12,13,16,23,28,29,30,31,33,34,38,39,40,],[19,-16,-15,19,19,19,19,19,19,19,-14,19,19,19,-11,]),'TIMES':([8,10,12,13,16,23,28,29,30,31,33,34,38,39,40,],[20,-16,-15,20,20,20,20,20,20,20,-14,20,20,20,-11,]),'DIVIDE':([8,10,12,13,16,23,28,29,30,31,33,34,38,39,40,],[21,-16,-15,21,21,21,21,21,21,21,-14,21,21,21,-11,]),'ELSE':([10,12,16,17,24,28,29,30,31,33,34,36,40,45,],[-16,-15,-1,27,-8,-2,-3,-4,-5,-14,-9,-7,-11,-10,]),'SEMI':([10,12,16,17,24,26,28,29,30,31,33,34,36,39,40,45,],[-16,-15,-1,-6,-8,35,-2,-3,-4,-5,-14,-9,-7,42,-11,-10,]),'RPAREN':([10,12,16,17,23,24,28,29,30,31,33,34,36,37,38,40,43,44,45,],[-16,-15,-1,-6,33,-8,-2,-3,-4,-5,-14,-9,-7,40,-13,-11,-12,45,-10,]),'COMMA':([10,12,28,29,30,31,33,38,40,],[-16,-15,-2,-3,-4,-5,-14,41,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,5,8,13,15,27,42,],[1,14,17,24,26,36,44,]),'expression':([3,4,7,11,18,19,20,21,25,32,35,41,],[8,13,16,23,28,29,30,31,34,38,39,38,]),'param_list':([32,41,],[37,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQUALS expression','statement',3,'p_statement_assign','_parser.py',8),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','_parser.py',14),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','_parser.py',15),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','_parser.py',16),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','_parser.py',17),
  ('statement -> IF expression statement','statement',3,'p_statement_conditional','_parser.py',24),
  ('statement -> IF expression statement ELSE statement','statement',5,'p_statement_conditional','_parser.py',25),
  ('statement -> WHILE expression statement','statement',3,'p_statement_while','_parser.py',34),
  ('statement -> DO statement WHILE expression','statement',4,'p_statement_do_while','_parser.py',38),
  ('statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN','statement',8,'p_statement_for','_parser.py',42),
  ('expression -> FUNCTION ID LPAREN param_list RPAREN','expression',5,'p_expression_function_call','_parser.py',47),
  ('param_list -> expression COMMA param_list','param_list',3,'p_param_list','_parser.py',51),
  ('param_list -> expression','param_list',1,'p_param_list_single','_parser.py',55),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','_parser.py',60),
  ('expression -> NUMBER','expression',1,'p_expression_num_id','_parser.py',66),
  ('expression -> ID','expression',1,'p_expression_num_id','_parser.py',67),
]
